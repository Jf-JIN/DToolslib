
# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish Python 🐍 distribution 📦 to PyPI

on:
  # 手动触发
  workflow_dispatch:

  # 发布触发
  release:
    types: [published]

  # 推送 tag 是 v*.*.*时触发, 如v1.0.0 或 v1.0.0.1
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: read


jobs:
  release-build:
    # 打包
    name: Build distribution 📦
    runs-on: ubuntu-latest

    steps:
      # clone 仓库
      - uses: actions/checkout@v4
      
      # 设置 Python环境和版本
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 安装 build 并 打包项目
      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python3 -m pip install build --user
          python3 -m build

      # 将打包得到的文件上传到 artifact
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
          retention-days: 1 # 1 天后删除 artifact

  pypi-publish:
    # 上传到 PPyPIypi
    name: Publish Python 🐍 distribution 📦 to PyPI
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' # 只在 推送tag 或 发布 时，才发布到 PyPI
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      url: https://pypi.org/p/DToolslib # 项目地址和名称
      
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
